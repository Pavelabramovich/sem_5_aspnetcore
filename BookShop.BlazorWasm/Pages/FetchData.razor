@page "/catalog"


@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

@inject HttpClient Http
@inject IServiceProvider ServiceProvider

@implements IDisposable


<PageTitle>Weather forecast</PageTitle>
<CategorySelector SelectedCategory="123"/>
<DishesList />


<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (_books == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Title</th>
                <th>Category</th>
                <th>Price</th>
                <th>Image</th>
                <th></th>
            </tr>
        </thead>

        <tbody>
            @foreach (var book in _books)
            {
                <tr>
                    <td>
                        @book.Title
                    </td>
                    <td>
                        @(book.Category != null ? book.Category.Name : "???")
                    </td>
                    <td>
                        @book.Price
                    </td>
                    <td>
                        <img src="@book.ImagePath" style="height: 80px;" />
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private IDataService _dataService;
    private List<Book> _books;

    [Parameter] public string Category { get; set; }

    public string SelectedName { get; set; }


    protected override async Task OnParametersSetAsync()
    {
        _dataService = ServiceProvider.GetRequiredService<IDataService>();
        _dataService.DataLoaded += StateHasChanged;

        _books = (await _dataService.GetProductListAsync(Category)).Items.ToList();

        var categories = new Dictionary<int, Category>();

        (await _dataService.GetCategoriesAsync()).ForEach(c => categories.Add(c.Id, c));

        foreach (var item in _books)
        {
            if (item.CategoryId is not null)
            {
                item.Category = categories[(int)item.CategoryId];
            }
        }
    }


    public void Dispose()
    {
        _dataService.DataLoaded -= StateHasChanged;
    }
}
