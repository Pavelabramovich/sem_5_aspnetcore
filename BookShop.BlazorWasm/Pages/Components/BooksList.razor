@implements IDisposable


@if (DataService.Books is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <link rel="stylesheet" href="lib/font-awesome/css/all.css" />

    <table class="table">
        <thead>
            <tr>
                <th>Title</th>
                <th>Info</th>
                <th></th>
            </tr>
        </thead>

        <tbody>
            @foreach (var book in DataService.Books)
            {
                <tr>
                    <td>
                        @book.Title
                    </td>
                    <td>
                        <button class="btn btn-info" @onclick="async () => await DisplayInfo.InvokeAsync(book.Id)">
                            <i class="fa-sharp fa-solid fa-magnifying-glass" style="letter-spacing:5px;">&nbsp; DETAILS</i>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


@* <table class="table">
    <thead>
        <tr>
            <th>Title</th>
            <th>Info</th>
            <th>Image</th>
            <th></th>
        </tr>
    </thead>

    <tbody>
        @foreach (var book in DataService.Books)
        {
            <tr>
                <td>
                    @book.Title
                </td>
                <td>
                    @book.Price
                </td>
                <td>
                    <img src="@book.ImagePath" style="height: 80px;" />
                </td>
            </tr>
        }
    </tbody>
</table> *@


@code {
    [Inject] public IDataService DataService { get; set; }

    [Parameter] public EventCallback<int> DisplayInfo { get; set; }


    protected override void OnInitialized()
    {
        DataService.DataLoaded += StateHasChanged;
    }

    public void Dispose()
    {
        DataService.DataLoaded -= StateHasChanged;
    }
}
